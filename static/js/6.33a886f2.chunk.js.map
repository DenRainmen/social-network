{"version":3,"file":"static/js/6.33a886f2.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?962c","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?42be","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?e370","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"banner\":\"ProfileInfo_banner__WdSEb\",\"avatarContainer\":\"ProfileInfo_avatarContainer__E6Umr\",\"avatar\":\"ProfileInfo_avatar__GBcIW\",\"inputFile\":\"ProfileInfo_inputFile__C5bVj\",\"status\":\"ProfileInfo_status__Loj5I\",\"button\":\"ProfileInfo_button__ZrqPJ\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\nimport style from './ProfileInfo.module.css'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n// class ProfileStatus extends React.Component<PropsType> {\n//     state = {\n//         editMode: false,\n//         statusValue: this.props.status\n//     }\n//\n//     activateEditMode = () => {\n//         this.setState({\n//             editMode: true\n//         })\n//     }\n//     deactivateEditMode = () => {\n//         this.setState({\n//             editMode: false\n//         })\n//         this.props.updateStatus(this.state.statusValue)\n//     }\n//     changeValueStatus = (e: ChangeEvent<HTMLInputElement>) => {\n//         this.setState({\n//             statusValue: e.currentTarget.value\n//         })\n//\n//     }\n//\n//     componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n//        if(prevProps.status !== this.state.statusValue) {\n//            this.setState({\n//                statusValue: prevProps.status\n//            })\n//        }\n//\n//     }\n//\n//     render() {\n//         return (\n//             <div>\n//                 {!this.state.editMode &&\n//                     <div>\n//                         <span onDoubleClick={this.activateEditMode}>{this.props.status || 'No Status'}</span>\n//                     </div>\n//                 }\n//                 {this.state.editMode &&\n//                     <div>\n//                         <input  onBlur={this.deactivateEditMode}\n//                                 onChange={this.changeValueStatus}\n//                                 value={this.state.statusValue}\n//                                 autoFocus={true}/>\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n\nconst ProfileStatus: FC<PropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false)\n    const [statusValue, setStatusValue] = useState(props.status)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(statusValue)\n    }\n    const changeValueStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatusValue(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n        setStatusValue(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {!editMode &&\n                <div className={style.status}>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || 'No Status'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onBlur={deactivateEditMode}\n                           onChange={changeValueStatus}\n                           value={statusValue}\n                           autoFocus={true}/>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatus;","import React, {FC} from \"react\";\nimport { UserProfileType} from \"../../../redux/profile-reducer\";\nimport {createField, Input, TextArea} from \"../../common/FormsControl/FormControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport style from \"../../common/FormsControl/FormControls.module.css\";\n\ntype ProfileDataFormType = {\n    userProfile: UserProfileType\n}\n\nconst ProfileDataForm: FC<InjectedFormProps<UserProfileType, ProfileDataFormType> & ProfileDataFormType> = ({\n                                                                                                                userProfile,\n                                                                                                                handleSubmit,\n                                                                                                                error\n                                                                                                            }) => {\n    if (!userProfile) {\n        return null\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <button className={style.button}>Save</button>\n            {error &&\n                <div className={style.formSummuryError}>\n                    {error}\n                </div>\n            }\n            <div>\n                <b>Full name</b>: {createField(\"Full name\", \"fullName\", Input, [], '', {})}\n            </div>\n            <div>\n                <b>Поиск работы</b>: {createField(\"\", \"lookingForAJob\", Input, [], '', {type: 'checkbox'})}\n            </div>\n            <div>\n                <b>My professional\n                    skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", TextArea, [], '', {})}\n            </div>\n            <div>\n                <b>About me</b>: {createField(\"about Me\", \"aboutMe\", Input, [], '', {})}\n            </div>\n            <div>\n                <h3>Contacts :</h3>\n                {Object.keys(userProfile.contacts)\n                    .map((key, i) => {\n                            return <div>\n                                <b>{key}</b>: {createField(key, `contacts.${key}`, Input, [], '', {})}\n\n                            </div>\n                        }\n                    )}\n            </div>\n\n\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<UserProfileType, ProfileDataFormType>({\n    form: 'editProfile'\n})(ProfileDataForm)\n\nexport default ProfileDataReduxForm","import React, {ChangeEvent, FC, useState} from 'react';\nimport style from \"./ProfileInfo.module.css\";\nimport {ContactsType, UserProfileType} from \"../../../redux/profile-reducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport avatar from './../../assets/images/user_photo.jpg'\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\ntype PropsType = {\n    userProfile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n    saveProfile: (formData: UserProfileType) => Promise<void>\n}\n\nconst ProfileInfo: FC<PropsType> = ({\n                                        userProfile,\n                                        status,\n                                        updateStatus,\n                                        isOwner,\n                                        savePhoto,\n                                        saveProfile\n                                    }) => {\n    const [editMode, setEditMode] = useState(false)\n    if (!userProfile) {\n        return <Preloader/>\n    }\n\n    const mainFotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const submit = (formData: UserProfileType) => {\n        saveProfile(formData)\n            .then(() => {\n                setEditMode(false)\n            })\n    }\n    return (\n        <div>\n            <div>\n                <img className={style.banner} src={'https://catherineasquithgallery.com/uploads/posts/2021-03/1614857449_178-p-fon-okeana-245.jpg'} alt={'banner'}/>\n            </div>\n            <div>\n                <div>\n                    <div className={style.avatarContainer}>\n                        <img src={userProfile.photos.large || avatar} alt={'photos'} className={style.avatar}/>\n                        <div>\n                            {isOwner && <input type={\"file\"} onChange={mainFotoSelected} className={style.inputFile}/>}\n                        </div>\n                    </div>\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\n                    {editMode\n                        ? <ProfileDataForm initialValues={userProfile} userProfile={userProfile} onSubmit={submit}/>\n                        : <ProfileData userProfile={userProfile} isOwner={isOwner} changeEditMode={setEditMode}/>\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport type ProfileDataPropsType = {\n    userProfile: UserProfileType\n    isOwner: boolean\n    changeEditMode: (value: boolean) => void\n}\nconst ProfileData: FC<ProfileDataPropsType> = ({userProfile, isOwner, changeEditMode}) => {\n    if (!userProfile) {\n        return null\n    }\n    return (\n        <div>\n            {isOwner && <div>\n                <button onClick={() => changeEditMode(true)} className={style.button}>Edit</button>\n            </div>\n            }\n\n            <span>{userProfile.fullName}</span>\n\n            <p>About me: {userProfile.aboutMe}</p>\n            <div>\n                <h4>Contacts :</h4>\n                {Object.keys(userProfile.contacts)\n                    .map((key, i) => <Contact key={i}\n                                              contactTitle={key}\n                                              contactValue={userProfile.contacts[key as keyof ContactsType]}\n                    />)}\n            </div>\n            <p>\n                Поиск работы: {userProfile.lookingForAJob ? 'Yes' : 'No'}\n            </p>\n            <p>\n                My professional skills: {userProfile.lookingForAJobDescription}\n            </p>\n        </div>\n    )\n}\n\ntype ContactPropsType = {\n    contactTitle: string | null\n    contactValue: string | null\n}\nexport const Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div>\n            {contactValue ? <><b>{contactTitle}</b>: {contactValue}</> : null }\n        </div>\n    )\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"myPostsBlock\":\"MyPosts_myPostsBlock__HDPCB\",\"postForm\":\"MyPosts_postForm__9jwjF\",\"fieldPost\":\"MyPosts_fieldPost__p8D5k\",\"button\":\"MyPosts_button__UyjT5\",\"posts\":\"MyPosts_posts__FYKAK\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__W0uzs\",\"likes\":\"Post_likes__vk2os\"};","import React, {FC} from 'react';\nimport style from './Post.module.css'\nimport {message} from \"antd\";\n\ntype PostType = {\n    message: string\n    counter: number\n}\nconst Post:FC<PostType> = ({message, counter}) => {\n    return (\n        <div className={style.item}>\n            <img src={'https://cs6.pikabu.ru/avatars/398/v398282.jpg?1343863926'} alt={'avatar'} />\n            {message}\n            <div>\n                <span className={style.likes}>like {counter}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Post;","import React, {FC} from 'react';\nimport style from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, minLength, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/FormsControl/FormControls\";\n\n\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    let {\n        postData,\n        addPost,\n    } = props;\n\n    const addNewPost = (formData: FormDataType) => {\n        console.log(formData)\n        addPost(formData.newPost)\n    }\n\n    return (\n        <div className={style.myPostsBlock}>\n            <div>\n                My posts\n            </div>\n            <MessagePostReduxForm onSubmit={addNewPost}/>\n            <div className={style.posts}>\n                {postData.map((p => <Post key={p.id} message={p.message} counter={p.counter}/>))}\n            </div>\n        </div>\n    );\n})\n\nconst maxLengthPost = maxLength(30)\nconst minLengthPost = minLength(5)\n\ntype FormDataType = {\n    newPost: string\n}\nconst MessagePostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={style.postForm}>\n            <div>\n                <Field component={TextArea}\n                       name={\"newPost\"}\n                       placeholder={\"Enter your post\"}\n                       validate={[required, maxLengthPost, minLengthPost]}\n                       className={style.fieldPost}\n                />\n            </div>\n            <div>\n                <button className={style.button}>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst MessagePostReduxForm = reduxForm<FormDataType>({\n    form: \"newPost\"\n})(MessagePostForm)\n\nexport default MyPosts;","import React from 'react';\nimport {addPostAction, PostType} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\ntype MapStateToPropsType = {\n    postData: PostType[]\n}\ntype MapDispatchToPropsType = {\n    addPost: (post: string) => void\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        postData: state.profilePage.postData,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (post: string) => dispatch(addPostAction(post)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {FC} from 'react';\nimport style from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profile-reducer\";\n\n\ntype ProfilePropsType = {\n    userProfile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n    saveProfile: (formData: UserProfileType) => Promise<void>\n}\nconst Profile: FC<ProfilePropsType> = React.memo((props) => {\n    return (\n        <div className={style.profile}>\n            <ProfileInfo userProfile={props.userProfile}\n                         isOwner={props.isOwner}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         savePhoto={props.savePhoto}\n                         saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n});\n\nexport default Profile;","import React, {FC} from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    getProfile,\n    getStatus,\n    savePhoto,\n    saveProfile,\n    updateStatus,\n    UserProfileType\n} from \"../../redux/profile-reducer\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToProps & RouteComponentProps<PathParamsType>\ntype PathParamsType = {\n    userId: string\n}\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId!.toString()\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        // debugger\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            this.refreshProfile()\n        }\n\n    }\n\n    render() {\n        if (!this.props.isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return (\n            <Profile userProfile={this.props.userProfile}\n                     isOwner={!this.props.match.params.userId}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\ntype MapStateToPropsType = {\n    userProfile: UserProfileType\n    status: string\n    isAuth: boolean\n    authorizedUserId: number | null\n\n}\ntype MapDispatchToProps = {\n    getProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (formData: UserProfileType) => Promise<void>\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        userProfile: state.profilePage.userProfile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        authorizedUserId: state.auth.id\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps,\n        {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n"],"names":["props","useState","editMode","setEditMode","status","statusValue","setStatusValue","useEffect","className","style","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","reduxForm","form","userProfile","handleSubmit","error","onSubmit","createField","Input","type","TextArea","Object","keys","contacts","map","key","i","ProfileData","isOwner","changeEditMode","onClick","fullName","aboutMe","Contact","contactTitle","contactValue","lookingForAJob","lookingForAJobDescription","savePhoto","saveProfile","Preloader","src","alt","photos","large","avatar","target","files","length","initialValues","formData","then","message","counter","MyPosts","React","postData","addPost","MessagePostReduxForm","console","log","newPost","p","id","maxLengthPost","maxLength","minLengthPost","minLength","Field","component","name","placeholder","validate","required","connect","state","profilePage","dispatch","post","addPostAction","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","isAuth","to","compose","auth","withRouter","withAuthRedirect"],"sourceRoot":""}